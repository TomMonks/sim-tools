Traceback (most recent call last):
  File "/home/tom/miniconda3/envs/sim_tools/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/tom/miniconda3/envs/sim_tools/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tom/miniconda3/envs/sim_tools/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tom/miniconda3/envs/sim_tools/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/tom/miniconda3/envs/sim_tools/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/tom/miniconda3/envs/sim_tools/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/tom/miniconda3/envs/sim_tools/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

# Create an instance of each distribution and generate 10,000 samples
distributions = [
    Exponential(mean=1.0, random_seed=42),
    Poisson(rate=1.0, random_seed=42),
    Erlang(mean=32.0, stdev=9.26, location=2.83, random_seed=42),
    ErlangK(k=3, theta=1.0, location=0.0, random_seed=42),
    Bernoulli(p=0.3, random_seed=42),
    Lognormal(mean=10, stdev=1, random_seed=42),
    Normal(mean=0, sigma=1, minimum=None, random_seed=42),
    Uniform(low=0, high=1, random_seed=42),
    Triangular(low=0, mode=0.5, high=1, random_seed=42),
    FixedDistribution(value=5),
    CombinationDistribution(Exponential(mean=1.0), Normal(mean=0, sigma=1, allow_neg=True)),
    ContinuousEmpirical(lower_bounds = [0, 5, 10, 15, 30, 45, 60, 120, 180, 240, 480],
                        upper_bounds = [5, 10, 15, 30, 45, 60, 120, 180, 240, 480, 2880],
                        freq = [34, 4, 8, 13, 15, 13, 19, 13, 9,  12, 73],
                        random_seed=42),
    Weibull(alpha = 1.93, beta = 19.15, random_seed=42),
    Gamma(alpha = 2.84, beta = 7.42, location=0.0, random_seed=42),
    Beta(alpha1 = 1.32, alpha2 = 2.56, lower_bound=10.0, upper_bound=15.0, random_seed=42),
    Discrete(values=[1, 2, 3], freq=[95, 3, 2], random_seed=42),
    PearsonV(alpha=10.0, beta=2.5, random_seed=42),
    PearsonVI(alpha1=10.0, alpha2=5.0, beta=0.85, random_seed=42)

]

fig, axs = plt.subplots(len(distributions) // 2, 2, figsize=(15, 15))

for i, distribution in enumerate(distributions):
    row = i // 2
    col = i % 2
    samples = distribution.sample(size=100_000)
    axs[row, col].hist(samples, bins=30, alpha=0.7)
    axs[row, col].set_title(distribution.__class__.__name__)

fig.tight_layout()
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[2], line 16[0m
[1;32m      2[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mplt[39;00m
[1;32m      4[0m [38;5;66;03m# Create an instance of each distribution and generate 10,000 samples[39;00m
[1;32m      5[0m distributions [38;5;241m=[39m [
[1;32m      6[0m     Exponential(mean[38;5;241m=[39m[38;5;241m1.0[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m      7[0m     Poisson(rate[38;5;241m=[39m[38;5;241m1.0[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m      8[0m     Erlang(mean[38;5;241m=[39m[38;5;241m32.0[39m, stdev[38;5;241m=[39m[38;5;241m9.26[39m, location[38;5;241m=[39m[38;5;241m2.83[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m      9[0m     ErlangK(k[38;5;241m=[39m[38;5;241m3[39m, theta[38;5;241m=[39m[38;5;241m1.0[39m, location[38;5;241m=[39m[38;5;241m0.0[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     10[0m     Bernoulli(p[38;5;241m=[39m[38;5;241m0.3[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     11[0m     Lognormal(mean[38;5;241m=[39m[38;5;241m10[39m, stdev[38;5;241m=[39m[38;5;241m1[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     12[0m     Normal(mean[38;5;241m=[39m[38;5;241m0[39m, sigma[38;5;241m=[39m[38;5;241m1[39m, minimum[38;5;241m=[39m[38;5;28;01mNone[39;00m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     13[0m     Uniform(low[38;5;241m=[39m[38;5;241m0[39m, high[38;5;241m=[39m[38;5;241m1[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     14[0m     Triangular(low[38;5;241m=[39m[38;5;241m0[39m, mode[38;5;241m=[39m[38;5;241m0.5[39m, high[38;5;241m=[39m[38;5;241m1[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     15[0m     FixedDistribution(value[38;5;241m=[39m[38;5;241m5[39m),
[0;32m---> 16[0m     CombinationDistribution(Exponential(mean[38;5;241m=[39m[38;5;241m1.0[39m), [43mNormal[49m[43m([49m[43mmean[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[43msigma[49m[38;5;241;43m=[39;49m[38;5;241;43m1[39;49m[43m,[49m[43m [49m[43mallow_neg[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m),
[1;32m     17[0m     ContinuousEmpirical(lower_bounds [38;5;241m=[39m [[38;5;241m0[39m, [38;5;241m5[39m, [38;5;241m10[39m, [38;5;241m15[39m, [38;5;241m30[39m, [38;5;241m45[39m, [38;5;241m60[39m, [38;5;241m120[39m, [38;5;241m180[39m, [38;5;241m240[39m, [38;5;241m480[39m],
[1;32m     18[0m                         upper_bounds [38;5;241m=[39m [[38;5;241m5[39m, [38;5;241m10[39m, [38;5;241m15[39m, [38;5;241m30[39m, [38;5;241m45[39m, [38;5;241m60[39m, [38;5;241m120[39m, [38;5;241m180[39m, [38;5;241m240[39m, [38;5;241m480[39m, [38;5;241m2880[39m],
[1;32m     19[0m                         freq [38;5;241m=[39m [[38;5;241m34[39m, [38;5;241m4[39m, [38;5;241m8[39m, [38;5;241m13[39m, [38;5;241m15[39m, [38;5;241m13[39m, [38;5;241m19[39m, [38;5;241m13[39m, [38;5;241m9[39m,  [38;5;241m12[39m, [38;5;241m73[39m],
[1;32m     20[0m                         random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     21[0m     Weibull(alpha [38;5;241m=[39m [38;5;241m1.93[39m, beta [38;5;241m=[39m [38;5;241m19.15[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     22[0m     Gamma(alpha [38;5;241m=[39m [38;5;241m2.84[39m, beta [38;5;241m=[39m [38;5;241m7.42[39m, location[38;5;241m=[39m[38;5;241m0.0[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     23[0m     Beta(alpha1 [38;5;241m=[39m [38;5;241m1.32[39m, alpha2 [38;5;241m=[39m [38;5;241m2.56[39m, lower_bound[38;5;241m=[39m[38;5;241m10.0[39m, upper_bound[38;5;241m=[39m[38;5;241m15.0[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     24[0m     Discrete(values[38;5;241m=[39m[[38;5;241m1[39m, [38;5;241m2[39m, [38;5;241m3[39m], freq[38;5;241m=[39m[[38;5;241m95[39m, [38;5;241m3[39m, [38;5;241m2[39m], random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     25[0m     PearsonV(alpha[38;5;241m=[39m[38;5;241m10.0[39m, beta[38;5;241m=[39m[38;5;241m2.5[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m),
[1;32m     26[0m     PearsonVI(alpha1[38;5;241m=[39m[38;5;241m10.0[39m, alpha2[38;5;241m=[39m[38;5;241m5.0[39m, beta[38;5;241m=[39m[38;5;241m0.85[39m, random_seed[38;5;241m=[39m[38;5;241m42[39m)
[1;32m     27[0m 
[1;32m     28[0m ]
[1;32m     30[0m fig, axs [38;5;241m=[39m plt[38;5;241m.[39msubplots([38;5;28mlen[39m(distributions) [38;5;241m/[39m[38;5;241m/[39m [38;5;241m2[39m, [38;5;241m2[39m, figsize[38;5;241m=[39m([38;5;241m15[39m, [38;5;241m15[39m))
[1;32m     32[0m [38;5;28;01mfor[39;00m i, distribution [38;5;129;01min[39;00m [38;5;28menumerate[39m(distributions):

[0;31mTypeError[0m: Normal.__init__() got an unexpected keyword argument 'allow_neg'

